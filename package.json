{
  "private": true,
  "author": {
    "name": "Aly Thobani",
    "email": "athobani9@gmail.com"
  },
  "publisher": "AlyThobani",
  "name": "region-helper",
  "displayName": "Region Helper",
  "description": "Easily visualize and navigate code regions in your files.",
  "repository": {
    "type": "git",
    "url": "https://github.com/alythobani/vscode-region-helper.git"
  },
  "icon": "./assets/icon.png",
  "license": "GPL-3.0-only",
  "version": "1.1.0",
  "engines": {
    "vscode": "^1.97.0"
  },
  "categories": [
    "Other",
    "Visualization"
  ],
  "activationEvents": [
    "onLanguage"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "region-helper.goToRegionBoundary",
        "title": "Region Helper: Go to Region Boundary"
      },
      {
        "command": "region-helper.selectCurrentRegion",
        "title": "Region Helper: Select Current Region"
      },
      {
        "command": "region-helper.goToRegionFromQuickPick",
        "title": "Region Helper: Go to Region..."
      },
      {
        "command": "region-helper.goToNextRegion",
        "title": "Region Helper: Go to Next Region"
      },
      {
        "command": "region-helper.goToPreviousRegion",
        "title": "Region Helper: Go to Previous Region"
      },
      {
        "command": "region-helper.hideRegionsView",
        "title": "Region Helper: Hide Regions View",
        "when": "config.region-helper.shouldShowRegionsView"
      },
      {
        "command": "region-helper.showRegionsView",
        "title": "Region Helper: Show Regions View",
        "when": "!config.region-helper.shouldShowRegionsView"
      },
      {
        "command": "region-helper.hideFullOutlineView",
        "title": "Region Helper: Hide Full Outline View",
        "when": "config.region-helper.shouldShowFullOutlineView"
      },
      {
        "command": "region-helper.showFullOutlineView",
        "title": "Region Helper: Show Full Outline View",
        "when": "!config.region-helper.shouldShowFullOutlineView"
      }
    ],
    "configuration": {
      "title": "Region Helper",
      "properties": {
        "region-helper.shouldShowRegionsView": {
          "type": "boolean",
          "default": true,
          "description": "Show the Regions view in the Explorer panel."
        },
        "region-helper.shouldShowFullOutlineView": {
          "type": "boolean",
          "default": true,
          "description": "Show the Full Outline view in the Explorer panel."
        },
        "region-helper.regionBoundaryPatternByLanguageId": {
          "type": "object",
          "description": "Regular expression strings to match region boundaries for different languages.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "startRegex": {
                "description": "JS-format regular expression string (or array of regex strings) to match the start of a region. Should ideally include a capturing group for the region name.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "endRegex": {
                "description": "JS-format regular expression string (or array of regex strings) to match the end of a region.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "required": [
              "startRegex",
              "endRegex"
            ]
          },
          "default": {
            "c": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "clojure": {
              "startRegex": "^\\s*;+\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*;+\\s*#endregion(?:\\s.*)?$"
            },
            "cpp": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "csharp": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "css": {
              "startRegex": "^\\s*\\/\\*\\s*#region(?:\\s+(.*?)\\s*)?\\*\\/",
              "endRegex": "^\\s*\\/\\*\\s*#endregion(?:\\s.*)?\\*\\/"
            },
            "dart": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "dockercompose": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "dockerfile": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "elixir": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "erlang": {
              "startRegex": "^\\s*%+\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*%+\\s*#endregion(?:\\s.*)?$"
            },
            "fsharp": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "go": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "graphql": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "haskell": {
              "startRegex": "^\\s*--\\s+#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*--\\s+#endregion(?:\\s.*)?$"
            },
            "html": {
              "startRegex": "^\\s*<!--\\s*#region(?:\\s+(.*?)\\s*)?-->",
              "endRegex": "^\\s*<!--\\s*#endregion(?:\\s.*)?-->"
            },
            "java": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "javascript": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "javascriptreact": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "json": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "jsonc": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "julia": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "kotlin": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "less": {
              "startRegex": [
                "^\\s*\\/\\*\\s*#region(?:\\s+(.*?)\\s*)?\\*\\/",
                "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$"
              ],
              "endRegex": [
                "^\\s*\\/\\*\\s*#endregion(?:\\s.*)?\\*\\/",
                "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
              ]
            },
            "lua": {
              "startRegex": "^\\s*--\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*--\\s*#endregion(?:\\s.*)?$"
            },
            "makefile": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "markdown": {
              "startRegex": "^\\s*<!--\\s*#region(?:\\s+(.*?)\\s*)?-->",
              "endRegex": "^\\s*<!--\\s*#endregion(?:\\s.*)?-->"
            },
            "objective-c": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "objective-cpp": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "ocaml": {
              "startRegex": "^\\s*\\(\\*\\s*#region(?:\\s+(.*?)\\s*)?\\*\\)",
              "endRegex": "^\\s*\\(\\*\\s*#endregion(?:\\s.*)?\\*\\)"
            },
            "pascal": {
              "startRegex": [
                "^\\s*\\(\\*\\s*#region(?:\\s+(.*?)\\s*)?\\*\\)",
                "^\\s*\\{\\s*#region(?:\\s+(.*?)\\s*)?\\}",
                "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$"
              ],
              "endRegex": [
                "^\\s*\\(\\*\\s*#endregion(?:\\s.*)?\\*\\)",
                "^\\s*\\{\\s*#endregion(?:\\s.*)?\\}",
                "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
              ]
            },
            "perl": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "php": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "python": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "r": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "ruby": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "rust": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "scss": {
              "startRegex": [
                "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
                "^\\s*\\/\\*\\s*#region(?:\\s+(.*?)\\s*)?\\*\\/"
              ],
              "endRegex": [
                "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$",
                "^\\s*\\/\\*\\s*#endregion(?:\\s.*)?\\*\\/"
              ]
            },
            "shellscript": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "sql": {
              "startRegex": "^\\s*--\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*--\\s*#endregion(?:\\s.*)?$"
            },
            "stylus": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "svelte": {
              "startRegex": "^\\s*<!--\\s*#region(?:\\s+(.*?)\\s*)?-->",
              "endRegex": "^\\s*<!--\\s*#endregion(?:\\s.*)?-->"
            },
            "swift": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "toml": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            },
            "typescript": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "typescriptreact": {
              "startRegex": "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$"
            },
            "vue": {
              "startRegex": [
                "^\\s*\\/\\/\\s*#region(?:\\s+(.*?)\\s*)?$",
                "^\\s*<!--\\s*#region(?:\\s+(.*?)\\s*)?-->"
              ],
              "endRegex": [
                "^\\s*\\/\\/\\s*#endregion(?:\\s.*)?$",
                "^\\s*<!--\\s*#endregion(?:\\s.*)?-->"
              ]
            },
            "xml": {
              "startRegex": "^\\s*<!--\\s*#region(?:\\s+(.*?)\\s*)?-->",
              "endRegex": "^\\s*<!--\\s*#endregion(?:\\s.*)?-->"
            },
            "yaml": {
              "startRegex": "^\\s*#\\s*region(?:\\s+(.*?)\\s*)?$",
              "endRegex": "^\\s*#\\s*endregion(?:\\s.*)?"
            }
          }
        }
      }
    },
    "keybindings": [
      {
        "command": "region-helper.goToRegionBoundary",
        "key": "alt+m",
        "when": "editorTextFocus"
      },
      {
        "command": "region-helper.selectCurrentRegion",
        "key": "alt+shift+m",
        "when": "editorTextFocus"
      },
      {
        "command": "region-helper.goToRegionFromQuickPick",
        "key": "ctrl+shift+r",
        "mac": "cmd+shift+r",
        "when": "editorTextFocus"
      },
      {
        "command": "region-helper.goToNextRegion",
        "key": "ctrl+alt+n",
        "when": "editorTextFocus"
      },
      {
        "command": "region-helper.goToPreviousRegion",
        "key": "ctrl+alt+p",
        "when": "editorTextFocus"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "regionHelperTreeView",
          "name": "Regions",
          "when": "config.region-helper.shouldShowRegionsView"
        },
        {
          "id": "regionHelperFullTreeView",
          "name": "Full Outline",
          "when": "config.region-helper.shouldShowFullOutlineView"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile && npm run lint",
    "compile": "webpack --config webpack.config.ts",
    "watch": "webpack --config webpack.config.ts --watch",
    "compile-tests": "rm -rf dist-tests && webpack --config webpack.test.config.ts",
    "watch-tests": "webpack --config webpack.test.config.ts --watch",
    "package": "vsce package",
    "pretest": "npm run compile-tests && npm run lint",
    "lint": "eslint src",
    "test": "rm -rf .vscode-test/user-data && vscode-test"
  },
  "devDependencies": {
    "@eslint/js": "^9.20.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/vscode": "^1.97.0",
    "@types/webpack": "^5.28.5",
    "@vscode/test-cli": "^0.0.8",
    "@vscode/test-electron": "^2.3.9",
    "copy-webpack-plugin": "^12.0.2",
    "eslint": "^9.20.1",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.24.0",
    "webpack": "^5.91.0",
    "webpack-cli": "^5.1.4"
  }
}
